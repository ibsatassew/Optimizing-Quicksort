Output for Optimization #1: Pivot Selection with 100 items to sort 

true
44 73 105 167 388 444 473 516 589 628 647 682 975 1014 1047 1099 1282 1296 1301 1307 1374 1868 1905 1966 2296 2298 2347 2432 2648 2711 2956 3153 3165 3192 3220 3373 3541 3584 3592 3856 4085 4256 4346 4406 4431 4514 4535 4600 4626 4670 4869 5009 5046 5146 5212 5268 5342 5380 5488 5492 5542 5624 5654 5892 5980 5984 6146 6230 6330 6495 6632 6697 6717 6819 6959 7203 7209 7299 7625 7669 7717 7778 7811 7968 8549 8627 8647 8820 8883 9123 9124 9142 9414 9458 9536 9619 9630 9686 9689 9810 

Output for Optimization #2: Hybrid Approaches with 100 items to sort 

true
197 310 319 366 461 543 554 578 593 606 834 863 933 934 1103 1159 1245 1250 1265 1428 1584 1620 1746 2120 2237 2248 2357 2370 2456 2549 2734 2838 2947 3127 3141 3352 3431 3431 3613 3617 3729 4045 4046 4082 4240 4313 4694 4719 4809 4867 4931 5047 5065 5158 5165 5385 5426 5601 5642 5685 5748 5940 6011 6011 6099 6260 6352 6398 6451 6632 6727 6788 6823 6941 7092 7125 7148 7177 7340 7530 7553 7653 7754 7783 7852 8074 8393 8546 8598 8621 8781 9022 9060 9202 9344 9394 9574 9730 9950 9951 

Output for Optimization #3: Non-recursive Implementation with 100 items to sort 

true
64 76 133 295 397 703 752 838 857 931 984 1225 1268 1522 1613 1725 1783 1816 1901 1939 1963 1981 2092 2187 2188 2360 2390 2534 2624 2700 2711 2738 2757 2791 2879 2999 3487 3546 3603 3689 3873 3963 3988 4088 4114 4222 4396 4473 4740 4857 4868 5081 5098 5130 5422 5482 5642 5651 5677 5788 5790 5939 6260 6268 6530 6733 6835 6848 6916 6927 6967 6998 7015 7094 7258 7370 7469 7477 7767 8068 8226 8273 8552 8568 8607 8705 8751 8821 8906 9031 9055 9155 9269 9274 9305 9473 9502 9547 9748 9918 

Timing for no Optimization(Lab 10) with 10000000 items to sort 
Time: 1810.937083 ms.

Timing for Optimization #1: Pivot Selection with 10000000 items to sort 
Time: 1669.199542 ms.

Timing for for Optimization #2: Hybrid Approaches with 10000000 items to sort 
With threshold size 20
Time: 1706.522125 ms.

With threshold size 200
Time: 1485.962417 ms.

With threshold size 2000
Time: 7122.769292 ms.

With threshold size 20000
Time: 117334.549958 ms.

Timing for Optimization #3: Non-recursive Implementation with 10000000 items to sort 
Time: 1439.803 ms.

Analysis 
Optimization 1 has improved the overall performance because using a "findpivot" method based on the median of three pivot selection can improve the performance of quicksort by choosing better pivots, reducing the number of comparisons, and providing better resistance to worst-case scenarios 

Optimization 2 has improved the overall performance as well because using insertion sort for small sub-arrays as a base case in a quicksort method with a threshold size can reduce overhead, exploit insertion sort's efficiency for small inputs, combine the strengths of both algorithms, and potentially improve cache performance, resulting in improved performance of the quicksort method in practice.

Optimization 3 has also improved the overall performance because using a stack-based implementation instead of recursion for the quicksort method can improve its performance by eliminating function call overhead, providing better space efficiency, enhancing cache performance, offering increased control over partitioning, and providing better scalability and adaptability for specific use cases.

I used different values for the threshold size and the space requirement for the non-recursive version of quicksort using a stack, as shown in the code you provided, is proportional to the maximum depth of the stack, which depends on the number of sub-arrays that are pushed onto the stack during the sorting process.

Combining Optimization Strategies
Optimization #1 and #2 (2)
Time: 1553.251583 ms.

Optimization #1 and #3 (1)
Time: 1534.271708 ms.

Optimization #2 and #3 (4)
Time: 1620.819333 ms.

All three 
Time: 1554.948917 ms.(3)


The rank is in the bracket 


